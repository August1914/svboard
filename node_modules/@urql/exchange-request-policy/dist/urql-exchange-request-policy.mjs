import { makeOperation as e } from "@urql/core";

import { tap as t, map as n } from "wonka";

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) {
        if (Object.prototype.hasOwnProperty.call(n, r)) {
          e[r] = n[r];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

function requestPolicyExchange(r) {
  return function(o) {
    var c = o.forward;
    var i = new Map;
    var a = (r || {}).ttl || 3e5;
    function processIncomingOperation(t) {
      if ("query" !== t.kind || "cache-first" !== t.context.requestPolicy && "cache-only" !== t.context.requestPolicy) {
        return t;
      }
      if ((new Date).getTime() - (i.get(t.key) || 0) > a && (!r.shouldUpgrade || r.shouldUpgrade(t))) {
        return e(t.kind, t, _extends({}, t.context, {
          requestPolicy: "cache-and-network"
        }));
      }
      return t;
    }
    function processIncomingResults(e) {
      var t = e.operation.context.meta;
      if (!i.has(e.operation.key) || !t || "miss" === t.cacheOutcome) {
        i.set(e.operation.key, (new Date).getTime());
      }
    }
    return function(e) {
      return t(processIncomingResults)(c(n(processIncomingOperation)(e)));
    };
  };
}

export { requestPolicyExchange };
//# sourceMappingURL=urql-exchange-request-policy.mjs.map
