{"version":3,"file":"urql-exchange-request-policy.min.mjs","sources":["../src/requestPolicyExchange.ts"],"sourcesContent":["import {\n  makeOperation,\n  Operation,\n  OperationResult,\n  Exchange,\n} from '@urql/core';\nimport { pipe, tap, map } from 'wonka';\n\nconst defaultTTL = 5 * 60 * 1000;\n\nexport interface Options {\n  shouldUpgrade?: (op: Operation) => boolean;\n  ttl?: number;\n}\n\nexport const requestPolicyExchange = (options: Options): Exchange => ({\n  forward,\n}) => {\n  const operations = new Map();\n  const TTL = (options || {}).ttl || defaultTTL;\n\n  const processIncomingOperation = (operation: Operation): Operation => {\n    if (\n      operation.kind !== 'query' ||\n      (operation.context.requestPolicy !== 'cache-first' &&\n        operation.context.requestPolicy !== 'cache-only')\n    ) {\n      return operation;\n    }\n\n    const currentTime = new Date().getTime();\n    const lastOccurrence = operations.get(operation.key) || 0;\n    if (\n      currentTime - lastOccurrence > TTL &&\n      (!options.shouldUpgrade || options.shouldUpgrade(operation))\n    ) {\n      return makeOperation(operation.kind, operation, {\n        ...operation.context,\n        requestPolicy: 'cache-and-network',\n      });\n    }\n\n    return operation;\n  };\n\n  const processIncomingResults = (result: OperationResult): void => {\n    const meta = result.operation.context.meta;\n    const isMiss =\n      !operations.has(result.operation.key) ||\n      !meta ||\n      meta.cacheOutcome === 'miss';\n    if (isMiss) {\n      operations.set(result.operation.key, new Date().getTime());\n    }\n  };\n\n  return ops$ => {\n    return pipe(\n      forward(pipe(ops$, map(processIncomingOperation))),\n      tap(processIncomingResults)\n    );\n  };\n};\n"],"names":["operations","ref","TTL","requestPolicy","isMiss","context","operation"],"mappings":"oUAkBQA,EAAUC,UACVC,yBAXW,6HAuBK,2GAKEC,yDAWhBC,cACHC,QAAsBC"}