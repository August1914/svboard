var e = require("@urql/core");

var t = require("svelte/store");

var n = require("svelte");

var r = require("wonka");

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) {
        if (Object.prototype.hasOwnProperty.call(n, r)) {
          e[r] = n[r];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

var o = new Set;

var i = "production" !== process.env.NODE_ENV ? function(e) {
  return o.add(e);
} : function() {
  return;
};

var a = Object.create(null);

function operationStore(e, n, r) {
  var i = {
    query: e,
    variables: n || null,
    context: r
  };
  var u = {
    stale: !1,
    fetching: !0,
    data: void 0,
    error: void 0,
    extensions: void 0
  };
  var s = t.writable(u);
  var c = !1;
  u.set = function set(e) {
    if (!e || e === u) {
      e = a;
    }
    c = !0;
    if ("production" !== process.env.NODE_ENV) {
      if (!o.has(e)) {
        for (var t in e) {
          if (!(t in i)) {
            throw new TypeError("It is not allowed to update result properties on an OperationStore.");
          }
        }
      }
      o.delete(e);
    }
    for (var n in e) {
      if ("query" === n || "variables" === n || "context" === n) {
        i[n] = e[n];
      } else if ("fetching" === n) {
        u[n] = !!e[n];
      } else if (n in u) {
        u[n] = e[n];
      }
    }
    u.stale = !!e.stale;
    c = !1;
    s.set(u);
  };
  u.update = function update(e) {
    u.set(e(u));
  };
  u.subscribe = function subscribe(e, t) {
    return s.subscribe(e, t);
  };
  Object.keys(i).forEach((function(e) {
    Object.defineProperty(u, e, {
      configurable: !1,
      get: function() {
        return i[e];
      },
      set: function set(t) {
        i[e] = t;
        if (!c) {
          s.set(u);
        }
      }
    });
  }));
  if ("production" !== process.env.NODE_ENV) {
    var f = _extends({}, u);
    Object.keys(u).forEach((function(e) {
      Object.defineProperty(f, e, {
        configurable: !1,
        get: function get() {
          return u[e];
        },
        set: function set() {
          throw new TypeError("It is not allowed to update result properties on an OperationStore.");
        }
      });
    }));
    Object.keys(i).forEach((function(e) {
      Object.defineProperty(f, e, {
        configurable: !1,
        get: function() {
          return i[e];
        },
        set: function set(t) {
          i[e] = t;
          if (!c) {
            s.set(u);
          }
        }
      });
    }));
    return f;
  }
  return u;
}

function getClient() {
  return n.getContext("$$_urql");
}

function setClient(e) {
  n.setContext("$$_urql", e);
}

var u = {
  fetching: !1,
  stale: !1,
  error: void 0,
  data: void 0,
  extensions: void 0
};

function toSource(t) {
  return r.make((function(n) {
    var r;
    var o;
    return t.subscribe((function(t) {
      var i = e.createRequest(t.query, t.variables);
      var a = e.stringifyVariables(i.context = t.context);
      if (void 0 === r || i.key !== r.key || void 0 === o || a !== o) {
        o = a;
        r = i;
        n.next(i);
      }
    }));
  }));
}

exports.getClient = getClient;

exports.initClient = function initClient(t) {
  var n = new e.Client(t);
  setClient(n);
  return n;
};

exports.mutation = function mutation(e) {
  var t = getClient();
  var n = "function" != typeof e.subscribe ? operationStore(e.query, e.variables) : e;
  return function(e, r) {
    var o = {
      fetching: !0,
      variables: e || n.variables,
      context: r || n.context
    };
    i(o);
    n.set(o);
    return t.mutation(n.query, n.variables, n.context).toPromise().then((function(e) {
      var t = _extends({}, {
        fetching: !1
      }, e);
      i(t);
      n.set(t);
      return n;
    }));
  };
};

exports.operationStore = operationStore;

exports.query = function query(e) {
  var t = getClient();
  var o = r.subscribe((function(t) {
    i(t);
    e.set(t);
  }))(r.scan((function(e, t) {
    return _extends({}, e, t);
  }), u)(r.switchMap((function(e) {
    if (e.context && e.context.pause) {
      return r.fromValue({
        fetching: !1,
        stale: !1
      });
    }
    return r.concat([ r.fromValue({
      fetching: !0,
      stale: !1
    }), r.map((function(e) {
      return _extends({}, {
        fetching: !1
      }, e, {
        stale: !!e.stale
      });
    }))(t.executeQuery(e, e.context)), r.fromValue({
      fetching: !1,
      stale: !1
    }) ]);
  }))(toSource(e))));
  n.onDestroy(o.unsubscribe);
  return e;
};

exports.setClient = setClient;

exports.subscription = function subscription(e, t) {
  var o = getClient();
  var a = r.subscribe((function(t) {
    i(t);
    e.set(t);
  }))(r.scan((function(e, n) {
    return _extends({}, e, n, {
      data: void 0 !== n.data ? "function" == typeof t ? t(e.data, n.data) : n.data : e.data,
      stale: !1
    });
  }), u)(r.switchMap((function(t) {
    if (t.context && t.context.pause) {
      return r.fromValue({
        fetching: !1
      });
    }
    return r.concat([ r.fromValue({
      fetching: !0
    }), o.executeSubscription(t, e.context), r.fromValue({
      fetching: !1
    }) ]);
  }))(toSource(e))));
  n.onDestroy(a.unsubscribe);
  return e;
};

Object.keys(e).forEach((function(t) {
  if ("default" !== t && !exports.hasOwnProperty(t)) {
    exports[t] = e[t];
  }
}));
//# sourceMappingURL=urql-svelte.js.map
