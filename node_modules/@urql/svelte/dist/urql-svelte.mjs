import { Client as t, createRequest as e, stringifyVariables as n } from "@urql/core";

export * from "@urql/core";

import { writable as r } from "svelte/store";

import { getContext as o, setContext as i, onDestroy as u } from "svelte";

import { subscribe as c, scan as a, switchMap as s, fromValue as f, concat as l, map as v, make as p } from "wonka";

function _extends() {
  return (_extends = Object.assign || function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];
      for (var r in n) {
        if (Object.prototype.hasOwnProperty.call(n, r)) {
          t[r] = n[r];
        }
      }
    }
    return t;
  }).apply(this, arguments);
}

var d = new Set;

var b = "production" !== process.env.NODE_ENV ? function(t) {
  return d.add(t);
} : function() {
  return;
};

var x = Object.create(null);

function operationStore(t, e, n) {
  var o = {
    query: t,
    variables: e || null,
    context: n
  };
  var i = {
    stale: !1,
    fetching: !0,
    data: void 0,
    error: void 0,
    extensions: void 0
  };
  var u = r(i);
  var c = !1;
  i.set = function set(t) {
    if (!t || t === i) {
      t = x;
    }
    c = !0;
    if ("production" !== process.env.NODE_ENV) {
      if (!d.has(t)) {
        for (var e in t) {
          if (!(e in o)) {
            throw new TypeError("It is not allowed to update result properties on an OperationStore.");
          }
        }
      }
      d.delete(t);
    }
    for (var n in t) {
      if ("query" === n || "variables" === n || "context" === n) {
        o[n] = t[n];
      } else if ("fetching" === n) {
        i[n] = !!t[n];
      } else if (n in i) {
        i[n] = t[n];
      }
    }
    i.stale = !!t.stale;
    c = !1;
    u.set(i);
  };
  i.update = function update(t) {
    i.set(t(i));
  };
  i.subscribe = function subscribe(t, e) {
    return u.subscribe(t, e);
  };
  Object.keys(o).forEach((function(t) {
    Object.defineProperty(i, t, {
      configurable: !1,
      get: function() {
        return o[t];
      },
      set: function set(e) {
        o[t] = e;
        if (!c) {
          u.set(i);
        }
      }
    });
  }));
  if ("production" !== process.env.NODE_ENV) {
    var a = _extends({}, i);
    Object.keys(i).forEach((function(t) {
      Object.defineProperty(a, t, {
        configurable: !1,
        get: function get() {
          return i[t];
        },
        set: function set() {
          throw new TypeError("It is not allowed to update result properties on an OperationStore.");
        }
      });
    }));
    Object.keys(o).forEach((function(t) {
      Object.defineProperty(a, t, {
        configurable: !1,
        get: function() {
          return o[t];
        },
        set: function set(e) {
          o[t] = e;
          if (!c) {
            u.set(i);
          }
        }
      });
    }));
    return a;
  }
  return i;
}

function getClient() {
  return o("$$_urql");
}

function setClient(t) {
  i("$$_urql", t);
}

function initClient(e) {
  var n = new t(e);
  setClient(n);
  return n;
}

var g = {
  fetching: !1,
  stale: !1,
  error: void 0,
  data: void 0,
  extensions: void 0
};

function toSource(t) {
  return p((function(r) {
    var o;
    var i;
    return t.subscribe((function(t) {
      var u = e(t.query, t.variables);
      var c = n(u.context = t.context);
      if (void 0 === o || u.key !== o.key || void 0 === i || c !== i) {
        i = c;
        o = u;
        r.next(u);
      }
    }));
  }));
}

function query(t) {
  var e = getClient();
  var n = c((function(e) {
    b(e);
    t.set(e);
  }))(a((function(t, e) {
    return _extends({}, t, e);
  }), g)(s((function(t) {
    if (t.context && t.context.pause) {
      return f({
        fetching: !1,
        stale: !1
      });
    }
    return l([ f({
      fetching: !0,
      stale: !1
    }), v((function(t) {
      return _extends({}, {
        fetching: !1
      }, t, {
        stale: !!t.stale
      });
    }))(e.executeQuery(t, t.context)), f({
      fetching: !1,
      stale: !1
    }) ]);
  }))(toSource(t))));
  u(n.unsubscribe);
  return t;
}

function subscription(t, e) {
  var n = getClient();
  var r = c((function(e) {
    b(e);
    t.set(e);
  }))(a((function(t, n) {
    return _extends({}, t, n, {
      data: void 0 !== n.data ? "function" == typeof e ? e(t.data, n.data) : n.data : t.data,
      stale: !1
    });
  }), g)(s((function(e) {
    if (e.context && e.context.pause) {
      return f({
        fetching: !1
      });
    }
    return l([ f({
      fetching: !0
    }), n.executeSubscription(e, t.context), f({
      fetching: !1
    }) ]);
  }))(toSource(t))));
  u(r.unsubscribe);
  return t;
}

function mutation(t) {
  var e = getClient();
  var n = "function" != typeof t.subscribe ? operationStore(t.query, t.variables) : t;
  return function(t, r) {
    var o = {
      fetching: !0,
      variables: t || n.variables,
      context: r || n.context
    };
    b(o);
    n.set(o);
    return e.mutation(n.query, n.variables, n.context).toPromise().then((function(t) {
      var e = _extends({}, {
        fetching: !1
      }, t);
      b(e);
      n.set(e);
      return n;
    }));
  };
}

export { getClient, initClient, mutation, operationStore, query, setClient, subscription };
//# sourceMappingURL=urql-svelte.mjs.map
